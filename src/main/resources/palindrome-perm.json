{
  "id": "palindrome-perm",
  "title": "Palindrome Permutations",
  "description": "Given a string, write a method `isPermutationOfPalindrome` to check if it is a permutation of a palindrome. \r\n\r\nThe palindrome does not need to be limited to just dictionary words (skip non-letter characters). Your solution should be case insensitive.\r\n\r\n### Examples\r\n\r\n* `\"Tact Coa\"` -> `true` (permutations: \"taco cat\", \"acto cta\", etc.)",
  "time_limit": 1,
  "memory_limit": 32,
  "level": 1,
  "function": {
    "name": "isPermutationOfPalindrome",
    "return": {
      "type": "java.lang.Boolean",
      "comment": " Indicate if string is a permutation of palindrome"
    },
    "parameters": [
      {
        "name": "phrase",
        "type": "java.lang.String",
        "comment": "string to be checked if any permutation is palindrome"
      }
    ]
  },
  "test_cases": [
    {"input": ["abcabcd"], "output": true},
    {"input": ["a"], "output": true},
    {"input": ["Aa"], "output": true},
    {"input": [""], "output": false},
    {"input": ["cxzwcxzwcxzwcxzwa"], "output": true},
    {"input": ["cxzwcxzwcxzwcxzwab"], "output": false},
    {"input": ["Tact Coa"], "output": true},
    {"input": ["Tact Coa&"], "output": true}
  ]
}